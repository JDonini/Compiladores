
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

<<<<<<< HEAD
_lr_signature = 'LPAREN RPAREN LCOR RCOR LKEY RKEY COMMA SEMICOLON ID NUMBER STRING_LITERAL PLUS MINUS MULT DIVIDE EQUALS DIFFERENT GT GTE LT LTE MOD UMINUS OR AND NOT ASSIGN PLUSASSIGN MINUSASSIGN MULTASSIGN DIVIDEASSIGN MODASSIGN QMARK COLON IF ELSE WHILE FOR RETURN STRING INT BOOLEAN TRUE FALSE BREAK READ WRITE\n    program : decSeq\n    \n    dec : varDec\n        | ID LPAREN paramList RPAREN LKEY block RKEY\n        | type ID LPAREN paramList RPAREN LKEY block RKEY\n    \n    varDec : type varSpecSeq SEMICOLON\n    \n    varSpec : ID\n            | ID ASSIGN literal\n            | ID LCOR NUMBER RCOR\n            | ID LCOR NUMBER RCOR ASSIGN LKEY literalSeq RKEY\n    \n    type : INT\n         | STRING\n         | BOOLEAN\n    \n    param : type ID\n          | type ID RCOR LCOR\n    \n    block : varDecList stmtList\n    \n    stmt : ifStmt\n         | whileStmt\n         | forStmt\n         | breakStmt\n         | returnStmt\n         | readStmt\n         | writeStmt\n         | assign SEMICOLON\n         | subCall SEMICOLON\n         | error\n    \n    ifStmt : IF LPAREN exp RPAREN LKEY block RKEY\n           | IF LPAREN exp RPAREN LKEY block RKEY ELSE LKEY block RKEY\n    \n    whileStmt : WHILE LPAREN exp RPAREN LKEY block RKEY\n    \n    forStmt : FOR LPAREN assign SEMICOLON exp SEMICOLON assign RPAREN LKEY block RKEY\n    \n    breakStmt : BREAK SEMICOLON\n    \n    readStmt : READ var SEMICOLON\n    \n    writeStmt : WRITE expList SEMICOLON\n    \n    returnStmt : RETURN SEMICOLON\n               | RETURN exp SEMICOLON\n    \n    subCall : ID LPAREN expList RPAREN\n    \n    assign : var ASSIGN exp\n           | var PLUSASSIGN exp\n           | var MINUSASSIGN exp\n           | var MULTASSIGN exp\n           | var DIVIDEASSIGN exp\n           | var MODASSIGN exp\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULT exp\n        | exp DIVIDE exp\n        | exp MOD exp\n    \n    exp : exp EQUALS exp\n        | exp DIFFERENT exp\n        | exp GT exp\n        | exp GTE exp\n        | exp LT exp\n        | exp LTE exp\n    \n    exp : exp AND exp\n        | exp OR exp\n        | NOT exp\n        | UMINUS exp\n    \n    exp : exp QMARK exp COLON exp\n    \n    exp : subCall\n    \n    exp : var\n    \n    exp : literal\n    \n    exp : LPAREN exp RPAREN\n    \n    var : ID\n        | ID LCOR exp RCOR\n    \n    literal : NUMBER\n            | STRING_LITERAL\n            | FALSE\n            | TRUE\n    \n    paramList : paramSeq\n              | empty\n    \n    paramSeq : param\n             | param COMMA paramSeq\n    \n    varDecList : varDec varDecList\n               | empty\n    \n    varSpecSeq : varSpec\n               | varSpec COMMA varSpecSeq\n    \n    decSeq : dec\n           | dec decSeq\n    \n    stmtList : stmt stmtList\n             | empty\n    \n    literalSeq : literal\n               | literal COMMA literalSeq\n    \n    expList : expSeq\n            | empty\n    \n    expSeq : exp\n           | exp COMMA expSeq\n    empty :'
    
_lr_action_items = {'ID':([0,3,4,6,7,8,9,19,23,24,37,43,44,45,46,48,50,52,54,55,56,57,58,59,60,63,68,69,71,73,77,78,79,80,81,82,83,85,86,90,93,94,95,96,97,98,103,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,136,137,144,164,165,167,170,172,173,177,178,181,182,],[5,5,-2,12,-10,-11,-12,27,-5,36,-86,72,-86,-73,36,-86,-3,72,-16,-17,-18,-19,-20,-21,-22,-25,72,92,72,-72,-23,-24,72,72,92,-30,-33,72,72,72,72,72,72,72,72,72,72,72,-4,-34,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-31,-32,72,72,-86,-86,72,92,-26,-28,-86,-86,-27,-29,]),'INT':([0,3,4,11,20,23,26,37,44,48,50,105,164,165,177,178,],[7,7,-2,7,7,-5,7,7,7,7,-3,-4,7,7,7,7,]),'STRING':([0,3,4,11,20,23,26,37,44,48,50,105,164,165,177,178,],[8,8,-2,8,8,-5,8,8,8,8,-3,-4,8,8,8,8,]),'BOOLEAN':([0,3,4,11,20,23,26,37,44,48,50,105,164,165,177,178,],[9,9,-2,9,9,-5,9,9,9,9,-3,-4,9,9,9,9,]),'$end':([1,2,3,4,10,23,50,105,],[0,-1,-76,-2,-77,-5,-3,-4,]),'LPAREN':([5,12,64,65,66,68,71,72,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,167,],[11,20,79,80,81,90,90,103,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'RPAREN':([11,15,16,17,18,20,27,28,30,31,32,33,38,47,72,87,88,89,100,101,102,103,108,109,126,127,128,130,131,132,133,134,135,138,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,171,174,],[-86,25,-68,-69,-70,-86,-13,40,-64,-65,-66,-67,-71,-14,-62,-58,-59,-60,-82,-83,-84,-86,142,143,-55,-56,159,-36,-37,-38,-39,-40,-41,161,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-61,-85,-35,-63,-57,176,]),'COMMA':([12,14,18,27,29,30,31,32,33,36,41,47,72,87,88,89,102,107,126,127,140,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,162,171,],[-6,24,26,-13,-7,-64,-65,-66,-67,-6,-8,-14,-62,-58,-59,-60,137,141,-55,-56,-9,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-61,-35,-63,-57,]),'SEMICOLON':([12,13,14,29,30,31,32,33,35,36,41,61,62,67,68,71,72,84,87,88,89,91,92,99,100,101,102,110,126,127,130,131,132,133,134,135,140,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,166,171,],[-6,23,-74,-7,-64,-65,-66,-67,-75,-6,-8,77,78,82,83,-86,-62,111,-58,-59,-60,129,-62,136,-82,-83,-84,144,-55,-56,-36,-37,-38,-39,-40,-41,-9,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-61,-85,-35,-63,170,-57,]),'ASSIGN':([12,36,41,70,72,92,162,],[21,21,49,93,-62,-62,-63,]),'LCOR':([12,36,39,72,92,],[22,22,47,104,104,]),'NUMBER':([21,22,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,141,144,167,],[30,34,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'STRING_LITERAL':([21,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,141,144,167,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FALSE':([21,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,141,144,167,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'TRUE':([21,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,141,144,167,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'error':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,63,-86,-73,-86,63,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'IF':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,64,-86,-73,-86,64,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'WHILE':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,65,-86,-73,-86,65,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'FOR':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,66,-86,-73,-86,66,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'BREAK':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,67,-86,-73,-86,67,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'RETURN':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,68,-86,-73,-86,68,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'READ':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,69,-86,-73,-86,69,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'WRITE':([23,37,43,44,45,48,52,54,55,56,57,58,59,60,63,73,77,78,82,83,111,129,136,164,165,172,173,177,178,181,182,],[-5,-86,71,-86,-73,-86,71,-16,-17,-18,-19,-20,-21,-22,-25,-72,-23,-24,-30,-33,-34,-31,-32,-86,-86,-26,-28,-86,-86,-27,-29,]),'RKEY':([23,30,31,32,33,37,42,43,44,45,48,51,52,53,54,55,56,57,58,59,60,63,73,74,76,77,78,82,83,106,107,111,129,136,163,164,165,168,169,172,173,177,178,179,180,181,182,],[-5,-64,-65,-66,-67,-86,50,-86,-86,-73,-86,-15,-86,-79,-16,-17,-18,-19,-20,-21,-22,-25,-72,105,-78,-23,-24,-30,-33,140,-80,-34,-31,-32,-81,-86,-86,172,173,-26,-28,-86,-86,181,182,-27,-29,]),'LKEY':([25,40,49,142,143,175,176,],[37,48,75,164,165,177,178,]),'RCOR':([27,30,31,32,33,34,72,87,88,89,126,127,139,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,162,171,],[39,-64,-65,-66,-67,41,-62,-58,-59,-60,-55,-56,162,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-61,-35,-63,-57,]),'PLUS':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,112,-58,-59,-60,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-61,-35,-63,112,112,]),'MINUS':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,113,-58,-59,-60,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-61,-35,-63,113,113,]),'MULT':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,114,-58,-59,-60,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-61,-35,-63,114,114,]),'DIVIDE':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,115,-58,-59,-60,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-61,-35,-63,115,115,]),'MOD':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,116,-58,-59,-60,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-61,-35,-63,116,116,]),'EQUALS':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,117,-58,-59,-60,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-61,-35,-63,117,117,]),'DIFFERENT':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,118,-58,-59,-60,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-61,-35,-63,118,118,]),'GT':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,119,-58,-59,-60,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-61,-35,-63,119,119,]),'GTE':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,120,-58,-59,-60,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-61,-35,-63,120,120,]),'LT':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,121,-58,-59,-60,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-61,-35,-63,121,121,]),'LTE':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,122,-58,-59,-60,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-61,-35,-63,122,122,]),'AND':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,123,-58,-59,-60,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-61,-35,-63,123,123,]),'OR':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,124,-58,-59,-60,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,-61,-35,-63,124,124,]),'QMARK':([30,31,32,33,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,166,171,],[-64,-65,-66,-67,-62,125,-58,-59,-60,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,-61,-35,-63,125,125,]),'COLON':([30,31,32,33,72,87,88,89,126,127,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,171,],[-64,-65,-66,-67,-62,-58,-59,-60,-55,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,167,-61,-35,-63,-57,]),'NOT':([68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,167,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'UMINUS':([68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,167,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'PLUSASSIGN':([70,72,92,162,],[94,-62,-62,-63,]),'MINUSASSIGN':([70,72,92,162,],[95,-62,-62,-63,]),'MULTASSIGN':([70,72,92,162,],[96,-62,-62,-63,]),'DIVIDEASSIGN':([70,72,92,162,],[97,-62,-62,-63,]),'MODASSIGN':([70,72,92,162,],[98,-62,-62,-63,]),'ELSE':([172,],[175,]),}
=======
_lr_signature = 'LPAREN RPAREN LCOR RCOR LKEY RKEY COMMA SEMICOLON ID NUMBER STRING_LITERAL PLUS MINUS MULT DIVIDE EQUALS DIFFERENT GT GTE LT LTE MOD UMINUS OR AND NOT ASSIGN PLUSASSIGN MINUSASSIGN MULTASSIGN DIVIDEASSIGN MODASSIGN QMARK COLON RETURN INT WHILE FALSE TRUE BREAK IF ELSE STRING READ WRITE BOOLEAN FOR\n    program : decSeq\n    \n    dec : varDec\n        | ID LPAREN paramList RPAREN LKEY block RKEY\n        | type ID LPAREN paramList RPAREN LKEY block RKEY\n    \n    varDec : type varSpecSeq SEMICOLON\n    \n    varSpec : ID\n            | ID ASSIGN literal\n            | ID LCOR NUMBER RCOR\n            | ID LCOR NUMBER RCOR ASSIGN LKEY literalSeq RKEY\n    \n    type : INT\n         | STRING\n         | BOOLEAN\n    \n    param : type ID\n          | type ID RCOR LCOR\n    \n    block : varDecList stmtList\n    \n    stmt : ifStmt\n         | whileStmt\n         | forStmt\n         | breakStmt\n         | returnStmt\n         | readStmt\n         | writeStmt\n         | assign SEMICOLON\n         | subCall SEMICOLON\n         | error\n    \n    ifStmt : IF LPAREN exp RPAREN LKEY block RKEY\n           | IF LPAREN exp RPAREN LKEY block RKEY ELSE LKEY block RKEY\n    \n    whileStmt : WHILE LPAREN exp RPAREN LKEY block RKEY\n    \n    forStmt : FOR LPAREN assign SEMICOLON exp SEMICOLON assign RPAREN LKEY block RKEY\n    \n    breakStmt : BREAK SEMICOLON\n    \n    readStmt : READ var SEMICOLON\n    \n    writeStmt : WRITE expList SEMICOLON\n    \n    returnStmt : RETURN SEMICOLON\n               | RETURN exp SEMICOLON\n    \n    subCall : ID LPAREN expList RPAREN\n    \n    assign : var ASSIGN exp\n           | var PLUSASSIGN exp\n           | var MINUSASSIGN exp\n           | var MULTASSIGN exp\n           | var DIVIDEASSIGN exp\n           | var MODASSIGN exp\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULT exp\n        | exp DIVIDE exp\n        | exp MOD exp\n    \n    exp : exp EQUALS exp\n        | exp DIFFERENT exp\n        | exp GT exp\n        | exp GTE exp\n        | exp LT exp\n        | exp LTE exp\n    \n    exp : exp AND exp\n        | exp OR exp\n        | NOT exp\n        | UMINUS exp\n    \n    exp : exp QMARK exp COLON exp\n    \n    exp : subCall\n    \n    exp : var\n    \n    exp : literal\n    \n    exp : LPAREN exp RPAREN\n    \n    var : ID\n        | ID LCOR exp RCOR\n    \n    literal : NUMBER\n            | STRING_LITERAL\n            | FALSE\n            | TRUE\n    \n    paramList : paramSeq\n              | empty\n    \n    paramSeq : param\n             | param COMMA paramSeq\n    \n    varDecList : varDec varDecList\n               | empty\n    \n    varSpecSeq : varSpec\n               | varSpec COMMA varSpecSeq\n    \n    decSeq : dec\n           | dec decSeq\n    \n    stmtList : stmt stmtList\n             | empty\n    \n    literalSeq : literal\n               | literal COMMA literalSeq\n    \n    expList : expSeq\n            | empty\n    \n    expSeq : exp\n           | exp COMMA expSeq\n    empty :'
    
_lr_action_items = {'WHILE':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,54,-73,-72,-25,-21,-16,-17,54,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'error':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,55,-73,-72,-25,-21,-16,-17,55,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'MULT':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-61,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-63,-35,115,115,]),'FOR':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,56,-73,-72,-25,-21,-16,-17,56,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'RETURN':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,57,-73,-72,-25,-21,-16,-17,57,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'RCOR':([27,29,30,31,32,35,62,81,84,86,113,114,132,145,146,147,148,149,151,152,153,154,155,156,157,158,159,161,162,170,],[37,-65,-67,-66,-64,40,-62,-58,-59,-60,-56,-55,161,-61,-44,-51,-45,-49,-52,-43,-42,-50,-54,-48,-46,-53,-47,-63,-35,-57,]),'ELSE':([174,],[176,]),'LTE':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-61,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-63,-35,121,121,]),'TRUE':([18,50,57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,108,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'EQUALS':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,129,129,129,129,129,129,129,129,129,129,129,129,129,129,-61,129,129,129,129,129,129,129,129,129,129,129,129,129,129,-63,-35,129,129,]),'LPAREN':([7,12,54,56,57,61,62,74,79,82,83,85,94,95,98,99,100,101,102,103,106,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[14,19,79,80,82,82,95,106,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'NUMBER':([17,18,50,57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,108,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[27,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FALSE':([18,50,57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,108,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BOOLEAN':([0,2,5,14,16,19,34,41,43,46,52,78,164,167,177,178,],[6,-2,6,6,-5,6,6,6,6,6,-3,-4,6,6,6,6,]),'DIVIDE':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-61,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-63,-35,117,117,]),'MULTASSIGN':([62,69,104,161,],[-62,102,-62,-63,]),'UMINUS':([57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'MINUSASSIGN':([62,69,104,161,],[-62,98,-62,-63,]),'MODASSIGN':([62,69,104,161,],[-62,100,-62,-63,]),'GTE':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,124,124,124,124,124,124,124,124,124,124,124,124,124,124,-61,124,124,124,124,124,124,124,124,124,124,124,124,124,124,-63,-35,124,124,]),'PLUSASSIGN':([62,69,104,161,],[-62,103,-62,-63,]),'DIFFERENT':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-61,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-63,-35,126,126,]),'LKEY':([36,38,42,143,163,175,176,],[41,43,50,164,167,177,178,]),'STRING_LITERAL':([18,50,57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,108,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'AND':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,128,128,128,128,128,128,128,128,128,128,128,128,128,128,-61,128,128,128,128,128,128,128,128,128,128,128,128,128,128,-63,-35,128,128,]),'LCOR':([12,26,40,62,104,],[17,17,44,94,94,]),'INT':([0,2,5,14,16,19,34,41,43,46,52,78,164,167,177,178,],[1,-2,1,1,-5,1,1,1,1,1,-3,-4,1,1,1,1,]),'MINUS':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-61,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-63,-35,122,122,]),'WRITE':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,61,-73,-72,-25,-21,-16,-17,61,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'PLUS':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-61,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-63,-35,123,123,]),'RKEY':([16,29,30,31,32,41,43,45,46,48,49,51,53,55,59,60,63,65,66,67,68,70,71,72,76,77,88,89,96,97,107,120,130,140,142,164,167,168,171,172,174,177,178,179,180,181,182,],[-5,-65,-67,-66,-64,-86,-86,52,-86,-86,-73,78,-72,-25,-21,-16,-17,-86,-18,-15,-19,-20,-22,-79,-80,109,-33,-24,-23,-78,-30,-34,-32,-31,-81,-86,-86,172,174,-28,-26,-86,-86,181,182,-29,-27,]),'ID':([0,1,2,4,5,6,9,15,16,21,41,43,46,47,48,49,52,53,55,57,59,60,61,63,65,66,68,70,71,73,78,79,80,82,83,85,88,89,94,95,96,98,99,100,101,102,103,106,107,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,144,164,166,167,169,172,174,177,178,181,182,],[7,-10,-2,12,7,-12,-11,26,-5,35,-86,-86,-86,26,62,-73,-3,-72,-25,62,-21,-16,62,-17,62,-18,-19,-20,-22,104,-4,62,104,62,62,62,-33,-24,62,62,-23,62,62,62,62,62,62,62,-30,62,62,62,62,62,-34,62,62,62,62,62,62,62,62,62,-32,62,-31,62,-86,62,-86,104,-28,-26,-86,-86,-29,-27,]),'QMARK':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-61,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-63,-35,119,119,]),'LT':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-61,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-63,-35,116,116,]),'COLON':([29,30,31,32,62,81,84,86,113,114,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,170,],[-65,-67,-66,-64,-62,-58,-59,-60,-56,-55,-61,-44,-51,-45,-49,166,-52,-43,-42,-50,-54,-48,-46,-53,-47,-63,-35,-57,]),'RPAREN':([14,19,20,22,23,24,29,30,31,32,33,35,39,44,62,81,84,86,91,92,93,95,110,112,113,114,133,134,135,136,137,138,139,141,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,170,173,],[-86,-86,-70,-68,-69,36,-65,-67,-66,-64,38,-13,-71,-14,-62,-58,-59,-60,-83,-84,-82,-86,143,145,-56,-55,162,-38,-36,-41,-40,-39,-37,163,-61,-44,-51,-45,-49,-52,-43,-42,-50,-54,-48,-46,-53,-47,-85,-63,-35,-57,175,]),'GT':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-61,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-63,-35,118,118,]),'$end':([2,3,5,8,13,16,52,78,],[-2,-1,-76,0,-77,-5,-3,-4,]),'NOT':([57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'ASSIGN':([12,26,37,62,69,104,161,],[18,18,42,-62,99,-62,-63,]),'DIVIDEASSIGN':([62,69,104,161,],[-62,101,-62,-63,]),'STRING':([0,2,5,14,16,19,34,41,43,46,52,78,164,167,177,178,],[9,-2,9,9,-5,9,9,9,9,9,-3,-4,9,9,9,9,]),'READ':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,73,-73,-72,-25,-21,-16,-17,73,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'IF':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,74,-73,-72,-25,-21,-16,-17,74,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'BREAK':([16,41,43,46,48,49,53,55,59,60,63,65,66,68,70,71,88,89,96,107,120,130,140,164,167,172,174,177,178,181,182,],[-5,-86,-86,-86,75,-73,-72,-25,-21,-16,-17,75,-18,-19,-20,-22,-33,-24,-23,-30,-34,-32,-31,-86,-86,-28,-26,-86,-86,-29,-27,]),'MOD':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-61,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-63,-35,127,127,]),'COMMA':([10,12,20,26,28,29,30,31,32,35,37,44,62,76,81,84,86,92,109,113,114,145,146,147,148,149,151,152,153,154,155,156,157,158,159,161,162,170,],[15,-6,34,-6,-7,-65,-67,-66,-64,-13,-8,-14,-62,108,-58,-59,-60,131,-9,-56,-55,-61,-44,-51,-45,-49,-52,-43,-42,-50,-54,-48,-46,-53,-47,-63,-35,-57,]),'OR':([29,30,31,32,62,81,84,86,87,92,110,112,113,114,132,134,135,136,137,138,139,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-65,-67,-66,-64,-62,-58,-59,-60,125,125,125,125,125,125,125,125,125,125,125,125,125,125,-61,125,125,125,125,125,125,125,125,125,125,125,125,125,125,-63,-35,125,125,]),'SEMICOLON':([10,11,12,25,26,28,29,30,31,32,37,57,58,61,62,64,75,81,84,86,87,90,91,92,93,104,105,109,111,113,114,134,135,136,137,138,139,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,165,170,],[-74,16,-6,-75,-6,-7,-65,-67,-66,-64,-8,88,89,-86,-62,96,107,-58,-59,-60,120,130,-83,-84,-82,-62,140,-9,144,-56,-55,-38,-36,-41,-40,-39,-37,-61,-44,-51,-45,-49,-52,-43,-42,-50,-54,-48,-46,-53,-47,-85,-63,-35,169,-57,]),}
>>>>>>> master

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

<<<<<<< HEAD
_lr_goto_items = {'program':([0,],[1,]),'decSeq':([0,3,],[2,10,]),'dec':([0,3,],[3,3,]),'varDec':([0,3,37,44,48,164,165,177,178,],[4,4,44,44,44,44,44,44,44,]),'type':([0,3,11,20,26,37,44,48,164,165,177,178,],[6,6,19,19,19,46,46,46,46,46,46,46,]),'varSpecSeq':([6,24,46,],[13,35,13,]),'varSpec':([6,24,46,],[14,14,14,]),'paramList':([11,20,],[15,28,]),'paramSeq':([11,20,26,],[16,16,38,]),'empty':([11,20,37,43,44,48,52,71,103,164,165,177,178,],[17,17,45,53,45,45,53,101,101,45,45,45,45,]),'param':([11,20,26,],[18,18,18,]),'literal':([21,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,141,144,167,],[29,89,89,107,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,107,89,89,]),'block':([37,48,164,165,177,178,],[42,74,168,169,179,180,]),'varDecList':([37,44,48,164,165,177,178,],[43,73,43,43,43,43,43,]),'stmtList':([43,52,],[51,76,]),'stmt':([43,52,],[52,52,]),'ifStmt':([43,52,],[54,54,]),'whileStmt':([43,52,],[55,55,]),'forStmt':([43,52,],[56,56,]),'breakStmt':([43,52,],[57,57,]),'returnStmt':([43,52,],[58,58,]),'readStmt':([43,52,],[59,59,]),'writeStmt':([43,52,],[60,60,]),'assign':([43,52,81,170,],[61,61,110,174,]),'subCall':([43,52,68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,167,],[62,62,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'var':([43,52,68,69,71,79,80,81,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,167,170,],[70,70,88,91,88,88,88,70,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,70,]),'exp':([68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,167,],[84,102,108,109,126,127,128,130,131,132,133,134,135,102,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,102,166,171,]),'expList':([71,103,],[99,138,]),'expSeq':([71,103,137,],[100,100,160,]),'literalSeq':([75,141,],[106,163,]),}
=======
_lr_goto_items = {'param':([14,19,34,],[20,20,20,]),'block':([41,43,164,167,177,178,],[45,51,168,171,179,180,]),'subCall':([48,57,61,65,79,82,83,85,94,95,98,99,100,101,102,103,106,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[58,81,81,58,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'varDec':([0,5,41,43,46,164,167,177,178,],[2,2,46,46,46,46,46,46,46,]),'decSeq':([0,5,],[3,13,]),'type':([0,5,14,19,34,41,43,46,164,167,177,178,],[4,4,21,21,21,47,47,47,47,47,47,47,]),'varDecList':([41,43,46,164,167,177,178,],[48,48,53,48,48,48,48,]),'paramSeq':([14,19,34,],[22,22,39,]),'expList':([61,95,],[90,133,]),'varSpec':([4,15,47,],[10,10,10,]),'ifStmt':([48,65,],[60,60,]),'varSpecSeq':([4,15,47,],[11,25,11,]),'returnStmt':([48,65,],[70,70,]),'program':([0,],[8,]),'assign':([48,65,80,169,],[64,64,111,173,]),'literal':([18,50,57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,108,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[28,76,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,76,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'forStmt':([48,65,],[66,66,]),'stmtList':([48,65,],[67,97,]),'whileStmt':([48,65,],[63,63,]),'writeStmt':([48,65,],[71,71,]),'var':([48,57,61,65,73,79,80,82,83,85,94,95,98,99,100,101,102,103,106,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,169,],[69,84,84,69,105,84,69,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,69,]),'dec':([0,5,],[5,5,]),'empty':([14,19,41,43,46,48,61,65,95,164,167,177,178,],[23,23,49,49,49,72,91,72,91,49,49,49,49,]),'breakStmt':([48,65,],[68,68,]),'stmt':([48,65,],[65,65,]),'exp':([57,61,79,82,83,85,94,95,98,99,100,101,102,103,106,115,116,117,118,119,121,122,123,124,125,126,127,128,129,131,144,166,],[87,92,110,112,113,114,132,92,134,135,136,137,138,139,141,146,147,148,149,150,151,152,153,154,155,156,157,158,159,92,165,170,]),'literalSeq':([50,108,],[77,142,]),'paramList':([14,19,],[24,33,]),'readStmt':([48,65,],[59,59,]),'expSeq':([61,95,131,],[93,93,160,]),}
>>>>>>> master

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','analisadorSintatico.py',28),
  ('dec -> varDec','dec',1,'p_dec','analisadorSintatico.py',35),
  ('dec -> ID LPAREN paramList RPAREN LKEY block RKEY','dec',7,'p_dec','analisadorSintatico.py',36),
  ('dec -> type ID LPAREN paramList RPAREN LKEY block RKEY','dec',8,'p_dec','analisadorSintatico.py',37),
  ('varDec -> type varSpecSeq SEMICOLON','varDec',3,'p_varDec','analisadorSintatico.py',49),
  ('varSpec -> ID','varSpec',1,'p_varSpec','analisadorSintatico.py',56),
  ('varSpec -> ID ASSIGN literal','varSpec',3,'p_varSpec','analisadorSintatico.py',57),
  ('varSpec -> ID LCOR NUMBER RCOR','varSpec',4,'p_varSpec','analisadorSintatico.py',58),
  ('varSpec -> ID LCOR NUMBER RCOR ASSIGN LKEY literalSeq RKEY','varSpec',8,'p_varSpec','analisadorSintatico.py',59),
  ('type -> INT','type',1,'p_type','analisadorSintatico.py',73),
  ('type -> STRING','type',1,'p_type','analisadorSintatico.py',74),
  ('type -> BOOLEAN','type',1,'p_type','analisadorSintatico.py',75),
  ('param -> type ID','param',2,'p_param','analisadorSintatico.py',82),
  ('param -> type ID RCOR LCOR','param',4,'p_param','analisadorSintatico.py',83),
  ('block -> varDecList stmtList','block',2,'p_block','analisadorSintatico.py',93),
  ('stmt -> ifStmt','stmt',1,'p_stmt','analisadorSintatico.py',100),
  ('stmt -> whileStmt','stmt',1,'p_stmt','analisadorSintatico.py',101),
  ('stmt -> forStmt','stmt',1,'p_stmt','analisadorSintatico.py',102),
  ('stmt -> breakStmt','stmt',1,'p_stmt','analisadorSintatico.py',103),
  ('stmt -> returnStmt','stmt',1,'p_stmt','analisadorSintatico.py',104),
  ('stmt -> readStmt','stmt',1,'p_stmt','analisadorSintatico.py',105),
  ('stmt -> writeStmt','stmt',1,'p_stmt','analisadorSintatico.py',106),
  ('stmt -> assign SEMICOLON','stmt',2,'p_stmt','analisadorSintatico.py',107),
  ('stmt -> subCall SEMICOLON','stmt',2,'p_stmt','analisadorSintatico.py',108),
  ('stmt -> error','stmt',1,'p_stmt','analisadorSintatico.py',109),
  ('ifStmt -> IF LPAREN exp RPAREN LKEY block RKEY','ifStmt',7,'p_ifStmt','analisadorSintatico.py',119),
  ('ifStmt -> IF LPAREN exp RPAREN LKEY block RKEY ELSE LKEY block RKEY','ifStmt',11,'p_ifStmt','analisadorSintatico.py',120),
  ('whileStmt -> WHILE LPAREN exp RPAREN LKEY block RKEY','whileStmt',7,'p_whileStmt','analisadorSintatico.py',130),
  ('forStmt -> FOR LPAREN assign SEMICOLON exp SEMICOLON assign RPAREN LKEY block RKEY','forStmt',11,'p_forStmt','analisadorSintatico.py',137),
  ('breakStmt -> BREAK SEMICOLON','breakStmt',2,'p_breakStmt','analisadorSintatico.py',144),
  ('readStmt -> READ var SEMICOLON','readStmt',3,'p_readStmt','analisadorSintatico.py',151),
  ('writeStmt -> WRITE expList SEMICOLON','writeStmt',3,'p_writeStmt','analisadorSintatico.py',158),
  ('returnStmt -> RETURN SEMICOLON','returnStmt',2,'p_returnStmt','analisadorSintatico.py',165),
  ('returnStmt -> RETURN exp SEMICOLON','returnStmt',3,'p_returnStmt','analisadorSintatico.py',166),
  ('subCall -> ID LPAREN expList RPAREN','subCall',4,'p_subCall','analisadorSintatico.py',173),
  ('assign -> var ASSIGN exp','assign',3,'p_assign','analisadorSintatico.py',180),
  ('assign -> var PLUSASSIGN exp','assign',3,'p_assign','analisadorSintatico.py',181),
  ('assign -> var MINUSASSIGN exp','assign',3,'p_assign','analisadorSintatico.py',182),
  ('assign -> var MULTASSIGN exp','assign',3,'p_assign','analisadorSintatico.py',183),
  ('assign -> var DIVIDEASSIGN exp','assign',3,'p_assign','analisadorSintatico.py',184),
  ('assign -> var MODASSIGN exp','assign',3,'p_assign','analisadorSintatico.py',185),
  ('exp -> exp PLUS exp','exp',3,'p_expArithmetic','analisadorSintatico.py',192),
  ('exp -> exp MINUS exp','exp',3,'p_expArithmetic','analisadorSintatico.py',193),
  ('exp -> exp MULT exp','exp',3,'p_expArithmetic','analisadorSintatico.py',194),
  ('exp -> exp DIVIDE exp','exp',3,'p_expArithmetic','analisadorSintatico.py',195),
  ('exp -> exp MOD exp','exp',3,'p_expArithmetic','analisadorSintatico.py',196),
  ('exp -> exp EQUALS exp','exp',3,'p_expComparison','analisadorSintatico.py',203),
  ('exp -> exp DIFFERENT exp','exp',3,'p_expComparison','analisadorSintatico.py',204),
  ('exp -> exp GT exp','exp',3,'p_expComparison','analisadorSintatico.py',205),
  ('exp -> exp GTE exp','exp',3,'p_expComparison','analisadorSintatico.py',206),
  ('exp -> exp LT exp','exp',3,'p_expComparison','analisadorSintatico.py',207),
  ('exp -> exp LTE exp','exp',3,'p_expComparison','analisadorSintatico.py',208),
  ('exp -> exp AND exp','exp',3,'p_expLogic','analisadorSintatico.py',215),
  ('exp -> exp OR exp','exp',3,'p_expLogic','analisadorSintatico.py',216),
  ('exp -> NOT exp','exp',2,'p_expLogic','analisadorSintatico.py',217),
  ('exp -> UMINUS exp','exp',2,'p_expLogic','analisadorSintatico.py',218),
  ('exp -> exp QMARK exp COLON exp','exp',5,'p_expTernary','analisadorSintatico.py',228),
  ('exp -> subCall','exp',1,'p_expSubCall','analisadorSintatico.py',235),
  ('exp -> var','exp',1,'p_expVar','analisadorSintatico.py',242),
  ('exp -> literal','exp',1,'p_expLiteral','analisadorSintatico.py',249),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_expMultParent','analisadorSintatico.py',256),
  ('var -> ID','var',1,'p_var','analisadorSintatico.py',263),
  ('var -> ID LCOR exp RCOR','var',4,'p_var','analisadorSintatico.py',264),
  ('literal -> NUMBER','literal',1,'p_literal','analisadorSintatico.py',274),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','analisadorSintatico.py',275),
  ('literal -> FALSE','literal',1,'p_literal','analisadorSintatico.py',276),
  ('literal -> TRUE','literal',1,'p_literal','analisadorSintatico.py',277),
  ('paramList -> paramSeq','paramList',1,'p_paramList','analisadorSintatico.py',284),
  ('paramList -> empty','paramList',1,'p_paramList','analisadorSintatico.py',285),
  ('paramSeq -> param','paramSeq',1,'p_paramSeq','analisadorSintatico.py',293),
  ('paramSeq -> param COMMA paramSeq','paramSeq',3,'p_paramSeq','analisadorSintatico.py',294),
  ('varDecList -> varDec varDecList','varDecList',2,'p_varDecList','analisadorSintatico.py',304),
  ('varDecList -> empty','varDecList',1,'p_varDecList','analisadorSintatico.py',305),
<<<<<<< HEAD
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_varSpecSeq','analisadorSintatico.py',315),
  ('varSpecSeq -> varSpec COMMA varSpecSeq','varSpecSeq',3,'p_varSpecSeq','analisadorSintatico.py',316),
  ('decSeq -> dec','decSeq',1,'p_decSeq','analisadorSintatico.py',326),
  ('decSeq -> dec decSeq','decSeq',2,'p_decSeq','analisadorSintatico.py',327),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmtList','analisadorSintatico.py',337),
  ('stmtList -> empty','stmtList',1,'p_stmtList','analisadorSintatico.py',338),
  ('literalSeq -> literal','literalSeq',1,'p_literalSeq','analisadorSintatico.py',346),
  ('literalSeq -> literal COMMA literalSeq','literalSeq',3,'p_literalSeq','analisadorSintatico.py',347),
  ('expList -> expSeq','expList',1,'p_expList','analisadorSintatico.py',357),
  ('expList -> empty','expList',1,'p_expList','analisadorSintatico.py',358),
  ('expSeq -> exp','expSeq',1,'p_expSeq','analisadorSintatico.py',366),
  ('expSeq -> exp COMMA expSeq','expSeq',3,'p_expSeq','analisadorSintatico.py',367),
  ('empty -> <empty>','empty',0,'p_empty','analisadorSintatico.py',376),
=======
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_varSpecSeq','analisadorSintatico.py',313),
  ('varSpecSeq -> varSpec COMMA varSpecSeq','varSpecSeq',3,'p_varSpecSeq','analisadorSintatico.py',314),
  ('decSeq -> dec','decSeq',1,'p_decSeq','analisadorSintatico.py',324),
  ('decSeq -> dec decSeq','decSeq',2,'p_decSeq','analisadorSintatico.py',325),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmtList','analisadorSintatico.py',335),
  ('stmtList -> empty','stmtList',1,'p_stmtList','analisadorSintatico.py',336),
  ('literalSeq -> literal','literalSeq',1,'p_literalSeq','analisadorSintatico.py',344),
  ('literalSeq -> literal COMMA literalSeq','literalSeq',3,'p_literalSeq','analisadorSintatico.py',345),
  ('expList -> expSeq','expList',1,'p_expList','analisadorSintatico.py',355),
  ('expList -> empty','expList',1,'p_expList','analisadorSintatico.py',356),
  ('expSeq -> exp','expSeq',1,'p_expSeq','analisadorSintatico.py',364),
  ('expSeq -> exp COMMA expSeq','expSeq',3,'p_expSeq','analisadorSintatico.py',365),
  ('empty -> <empty>','empty',0,'p_empty','analisadorSintatico.py',374),
>>>>>>> master
]
