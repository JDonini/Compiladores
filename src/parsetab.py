
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "LPAREN RPAREN LCOR RCOR LKEY RKEY COMMA SEMICOLON ID NUMBER PLUS MINUS MULT DIVIDE EQUALS DIFFERENT GT GTE LT LTE OR AND NOT ASSING PLUSASSING MINUSASSING MULTASSING DIVIDEASSING MODASSING MOD NEGUNARY STRING_LITERAL IF ELSE WHILE FOR RETURN STRING INT BOOLEAN TRUE FALSE BREAK READ WRITE\n    program : decSeq\n    \n    dec : varDec\n        | ID LPAREN paramList RPAREN LKEY block RKEY\n        | type ID LPAREN paramList RPAREN LKEY block RKEY\n    \n    varDec : type varSpecSeq SEMICOLON\n    \n    varSpec : ID\n            | ID ASSING literal\n            | ID LCOR NUMBER RCOR\n            | ID LCOR NUMBER RCOR ASSING LKEY literalSeq RKEY\n    \n    type : INT\n         | STRING\n         | BOOLEAN\n    \n    param : type ID\n          | type ID RCOR LCOR\n    \n    block : varDecList stmtList\n    \n    stmt : ifStmt\n         | whileStmt\n         | forStmt\n         | breakStmt\n         | returnStmt\n         | readStmt\n         | writeStmt\n         | assing SEMICOLON\n         | subCall SEMICOLON\n    \n    ifStmt : IF LPAREN exp RPAREN LKEY block RKEY\n           | IF LPAREN exp RPAREN LKEY block RKEY ELSE LKEY block RKEY\n    \n    whileStmt : WHILE LPAREN exp RPAREN LKEY block RKEY\n    \n    forStmt : FOR LPAREN assing SEMICOLON exp SEMICOLON assing RPAREN LKEY block RKEY\n    \n    breakStmt : BREAK SEMICOLON\n    \n    readStmt : READ var SEMICOLON\n    \n    writeStmt : WRITE expList SEMICOLON\n    \n    returnStmt : RETURN SEMICOLON\n               | RETURN exp SEMICOLON\n    \n    subCall : ID LPAREN expList RPAREN\n    \n    assing : var ASSING exp\n           | var PLUSASSING exp\n           | var MINUSASSING exp\n           | var MULTASSING exp\n           | var DIVIDEASSING exp\n           | var MODASSING exp\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULT exp\n        | exp DIVIDE exp\n        | exp MOD exp\n    \n    exp : exp EQUALS exp\n        | exp DIFFERENT exp\n        | exp LTE exp\n        | exp GTE exp\n        | exp GT exp\n        | exp LT exp\n    \n    exp : exp AND exp\n        | exp OR exp\n        | NOT exp\n        | NEGUNARY exp\n    \n    exp : exp '?' exp ':' exp\n    \n    exp : subCall\n    \n    exp : var\n    \n    exp : literal\n    \n    exp : LPAREN exp RPAREN\n    \n    var : ID\n        | ID LCOR exp RCOR\n    \n    literal : NUMBER\n            | STRING_LITERAL\n            | FALSE\n            | TRUE\n    \n    paramList : paramSeq\n              | 'ε'\n    \n    program : empty\n    \n    paramSeq : param\n             | param COMMA paramSeq\n    \n    varDecList : varDec varDecList\n               | 'ε'\n    \n    varSpecSeq : varSpec\n               | varSpec COMMA varSpecSeq\n    \n    decSeq : dec\n           | dec decSeq\n    \n    stmtList : stmt stmtList\n             | 'ε'\n    \n    literalSeq : literal\n               | literal literalSeq\n    \n    expList : expSeq\n            | 'ε'\n    \n    expSeq : exp\n           | exp COMMA expSeq\n    empty :"
    
_lr_action_items = {'$end':([0,1,2,3,4,5,11,24,51,105,],[-86,0,-1,-69,-76,-2,-77,-5,-3,-4,]),'ID':([0,4,5,7,8,9,10,20,24,25,44,46,47,51,53,55,56,57,58,59,60,61,68,69,71,73,77,78,79,80,81,82,83,85,86,90,93,94,95,96,97,98,103,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,136,137,144,166,169,171,172,180,181,],[6,6,-2,13,-10,-11,-12,28,-5,37,72,-73,37,-3,72,-16,-17,-18,-19,-20,-21,-22,72,92,72,-72,-23,-24,72,72,92,-29,-32,72,72,72,72,72,72,72,72,72,72,72,-4,-33,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-30,-31,72,72,72,92,-25,-27,-26,-28,]),'INT':([0,4,5,12,21,24,27,38,45,49,51,105,163,164,176,177,],[8,8,-2,8,8,-5,8,8,8,8,-3,-4,8,8,8,8,]),'STRING':([0,4,5,12,21,24,27,38,45,49,51,105,163,164,176,177,],[9,9,-2,9,9,-5,9,9,9,9,-3,-4,9,9,9,9,]),'BOOLEAN':([0,4,5,12,21,24,27,38,45,49,51,105,163,164,176,177,],[10,10,-2,10,10,-5,10,10,10,10,-3,-4,10,10,10,10,]),'LPAREN':([6,13,64,65,66,68,71,72,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[12,21,79,80,81,90,90,103,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'ε':([12,21,24,38,44,45,46,49,53,55,56,57,58,59,60,61,71,73,77,78,82,83,103,111,129,136,163,164,171,172,176,177,180,181,],[18,18,-5,46,54,46,-73,46,54,-16,-17,-18,-19,-20,-21,-22,101,-72,-23,-24,-29,-32,101,-33,-30,-31,46,46,-25,-27,46,46,-26,-28,]),'COMMA':([13,15,19,28,30,31,32,33,34,37,42,48,72,87,88,89,102,126,127,140,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,162,170,],[-6,25,27,-13,-7,-63,-64,-65,-66,-6,-8,-14,-61,-57,-58,-59,137,-54,-55,-9,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-60,-34,-62,-56,]),'SEMICOLON':([13,14,15,30,31,32,33,34,36,37,42,62,63,67,68,72,84,87,88,89,91,92,99,100,101,102,110,126,127,130,131,132,133,134,135,140,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,165,170,],[-6,24,-74,-7,-63,-64,-65,-66,-75,-6,-8,77,78,82,83,-61,111,-57,-58,-59,129,-61,136,-82,-83,-84,144,-54,-55,-35,-36,-37,-38,-39,-40,-9,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-60,-85,-34,-62,169,-56,]),'ASSING':([13,37,42,70,72,92,162,],[22,22,50,93,-61,-61,-62,]),'LCOR':([13,37,40,72,92,],[23,23,48,104,104,]),'RPAREN':([16,17,18,19,28,29,31,32,33,34,39,48,72,87,88,89,100,101,102,108,109,126,127,128,130,131,132,133,134,135,138,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,170,173,],[26,-67,-68,-70,-13,41,-63,-64,-65,-66,-71,-14,-61,-57,-58,-59,-82,-83,-84,142,143,-54,-55,159,-35,-36,-37,-38,-39,-40,161,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-60,-85,-34,-62,-56,175,]),'NUMBER':([22,23,31,32,33,34,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[31,35,-63,-64,-65,-66,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'STRING_LITERAL':([22,31,32,33,34,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[32,-63,-64,-65,-66,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FALSE':([22,31,32,33,34,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[33,-63,-64,-65,-66,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'TRUE':([22,31,32,33,34,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[34,-63,-64,-65,-66,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'LKEY':([26,41,50,142,143,174,175,],[38,49,75,163,164,176,177,]),'RCOR':([28,31,32,33,34,35,72,87,88,89,126,127,139,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,162,170,],[40,-63,-64,-65,-66,42,-61,-57,-58,-59,-54,-55,162,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-60,-34,-62,-56,]),'PLUS':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,112,-57,-58,-59,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-60,-34,-62,112,112,]),'MINUS':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,113,-57,-58,-59,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-60,-34,-62,113,113,]),'MULT':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,114,-57,-58,-59,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-60,-34,-62,114,114,]),'DIVIDE':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,115,-57,-58,-59,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-60,-34,-62,115,115,]),'MOD':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,116,-57,-58,-59,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-60,-34,-62,116,116,]),'EQUALS':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,117,-57,-58,-59,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-60,-34,-62,117,117,]),'DIFFERENT':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,118,-57,-58,-59,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-60,-34,-62,118,118,]),'LTE':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,119,-57,-58,-59,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-60,-34,-62,119,119,]),'GTE':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,120,-57,-58,-59,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-60,-34,-62,120,120,]),'GT':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,121,-57,-58,-59,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-60,-34,-62,121,121,]),'LT':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,122,-57,-58,-59,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-60,-34,-62,122,122,]),'AND':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,123,-57,-58,-59,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-60,-34,-62,123,123,]),'OR':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,124,-57,-58,-59,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,-60,-34,-62,124,124,]),'?':([31,32,33,34,72,84,87,88,89,102,108,109,126,127,128,130,131,132,133,134,135,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,165,170,],[-63,-64,-65,-66,-61,125,-57,-58,-59,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,-60,-34,-62,125,125,]),'RKEY':([31,32,33,34,43,52,54,74,76,106,107,141,167,168,178,179,],[-63,-64,-65,-66,51,-15,-79,105,-78,140,-80,-81,171,172,180,181,]),':':([31,32,33,34,72,87,88,89,126,127,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,170,],[-63,-64,-65,-66,-61,-57,-58,-59,-54,-55,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,166,-60,-34,-62,-56,]),'IF':([44,46,53,55,56,57,58,59,60,61,73,77,78,82,83,111,129,136,171,172,180,181,],[64,-73,64,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-25,-27,-26,-28,]),'WHILE':([44,46,53,55,56,57,58,59,60,61,73,77,78,82,83,111,129,136,171,172,180,181,],[65,-73,65,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-25,-27,-26,-28,]),'FOR':([44,46,53,55,56,57,58,59,60,61,73,77,78,82,83,111,129,136,171,172,180,181,],[66,-73,66,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-25,-27,-26,-28,]),'BREAK':([44,46,53,55,56,57,58,59,60,61,73,77,78,82,83,111,129,136,171,172,180,181,],[67,-73,67,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-25,-27,-26,-28,]),'RETURN':([44,46,53,55,56,57,58,59,60,61,73,77,78,82,83,111,129,136,171,172,180,181,],[68,-73,68,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-25,-27,-26,-28,]),'READ':([44,46,53,55,56,57,58,59,60,61,73,77,78,82,83,111,129,136,171,172,180,181,],[69,-73,69,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-25,-27,-26,-28,]),'WRITE':([44,46,53,55,56,57,58,59,60,61,73,77,78,82,83,111,129,136,171,172,180,181,],[71,-73,71,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-25,-27,-26,-28,]),'NOT':([68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'NEGUNARY':([68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'PLUSASSING':([70,72,92,162,],[94,-61,-61,-62,]),'MINUSASSING':([70,72,92,162,],[95,-61,-61,-62,]),'MULTASSING':([70,72,92,162,],[96,-61,-61,-62,]),'DIVIDEASSING':([70,72,92,162,],[97,-61,-61,-62,]),'MODASSING':([70,72,92,162,],[98,-61,-61,-62,]),'ELSE':([171,],[174,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decSeq':([0,4,],[2,11,]),'empty':([0,],[3,]),'dec':([0,4,],[4,4,]),'varDec':([0,4,38,45,49,163,164,176,177,],[5,5,45,45,45,45,45,45,45,]),'type':([0,4,12,21,27,38,45,49,163,164,176,177,],[7,7,20,20,20,47,47,47,47,47,47,47,]),'varSpecSeq':([7,25,47,],[14,36,14,]),'varSpec':([7,25,47,],[15,15,15,]),'paramList':([12,21,],[16,29,]),'paramSeq':([12,21,27,],[17,17,39,]),'param':([12,21,27,],[19,19,19,]),'literal':([22,68,71,75,79,80,85,86,90,93,94,95,96,97,98,103,104,107,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[30,89,89,107,89,89,89,89,89,89,89,89,89,89,89,89,89,107,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'block':([38,49,163,164,176,177,],[43,74,167,168,178,179,]),'varDecList':([38,45,49,163,164,176,177,],[44,73,44,44,44,44,44,]),'stmtList':([44,53,],[52,76,]),'stmt':([44,53,],[53,53,]),'ifStmt':([44,53,],[55,55,]),'whileStmt':([44,53,],[56,56,]),'forStmt':([44,53,],[57,57,]),'breakStmt':([44,53,],[58,58,]),'returnStmt':([44,53,],[59,59,]),'readStmt':([44,53,],[60,60,]),'writeStmt':([44,53,],[61,61,]),'assing':([44,53,81,169,],[62,62,110,173,]),'subCall':([44,53,68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[63,63,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'var':([44,53,68,69,71,79,80,81,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,169,],[70,70,88,91,88,88,88,70,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,70,]),'exp':([68,71,79,80,85,86,90,93,94,95,96,97,98,103,104,112,113,114,115,116,117,118,119,120,121,122,123,124,125,137,144,166,],[84,102,108,109,126,127,128,130,131,132,133,134,135,102,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,102,165,170,]),'expList':([71,103,],[99,138,]),'expSeq':([71,103,137,],[100,100,160,]),'literalSeq':([75,107,],[106,141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','analisadorSintatico.py',32),
  ('dec -> varDec','dec',1,'p_dec','analisadorSintatico.py',39),
  ('dec -> ID LPAREN paramList RPAREN LKEY block RKEY','dec',7,'p_dec','analisadorSintatico.py',40),
  ('dec -> type ID LPAREN paramList RPAREN LKEY block RKEY','dec',8,'p_dec','analisadorSintatico.py',41),
  ('varDec -> type varSpecSeq SEMICOLON','varDec',3,'p_varDec','analisadorSintatico.py',53),
  ('varSpec -> ID','varSpec',1,'p_varSpec','analisadorSintatico.py',60),
  ('varSpec -> ID ASSING literal','varSpec',3,'p_varSpec','analisadorSintatico.py',61),
  ('varSpec -> ID LCOR NUMBER RCOR','varSpec',4,'p_varSpec','analisadorSintatico.py',62),
  ('varSpec -> ID LCOR NUMBER RCOR ASSING LKEY literalSeq RKEY','varSpec',8,'p_varSpec','analisadorSintatico.py',63),
  ('type -> INT','type',1,'p_type','analisadorSintatico.py',77),
  ('type -> STRING','type',1,'p_type','analisadorSintatico.py',78),
  ('type -> BOOLEAN','type',1,'p_type','analisadorSintatico.py',79),
  ('param -> type ID','param',2,'p_param','analisadorSintatico.py',86),
  ('param -> type ID RCOR LCOR','param',4,'p_param','analisadorSintatico.py',87),
  ('block -> varDecList stmtList','block',2,'p_block','analisadorSintatico.py',97),
  ('stmt -> ifStmt','stmt',1,'p_stmt','analisadorSintatico.py',104),
  ('stmt -> whileStmt','stmt',1,'p_stmt','analisadorSintatico.py',105),
  ('stmt -> forStmt','stmt',1,'p_stmt','analisadorSintatico.py',106),
  ('stmt -> breakStmt','stmt',1,'p_stmt','analisadorSintatico.py',107),
  ('stmt -> returnStmt','stmt',1,'p_stmt','analisadorSintatico.py',108),
  ('stmt -> readStmt','stmt',1,'p_stmt','analisadorSintatico.py',109),
  ('stmt -> writeStmt','stmt',1,'p_stmt','analisadorSintatico.py',110),
  ('stmt -> assing SEMICOLON','stmt',2,'p_stmt','analisadorSintatico.py',111),
  ('stmt -> subCall SEMICOLON','stmt',2,'p_stmt','analisadorSintatico.py',112),
  ('ifStmt -> IF LPAREN exp RPAREN LKEY block RKEY','ifStmt',7,'p_ifStmt','analisadorSintatico.py',122),
  ('ifStmt -> IF LPAREN exp RPAREN LKEY block RKEY ELSE LKEY block RKEY','ifStmt',11,'p_ifStmt','analisadorSintatico.py',123),
  ('whileStmt -> WHILE LPAREN exp RPAREN LKEY block RKEY','whileStmt',7,'p_whileStmt','analisadorSintatico.py',133),
  ('forStmt -> FOR LPAREN assing SEMICOLON exp SEMICOLON assing RPAREN LKEY block RKEY','forStmt',11,'p_forStmt','analisadorSintatico.py',140),
  ('breakStmt -> BREAK SEMICOLON','breakStmt',2,'p_readStmt','analisadorSintatico.py',147),
  ('readStmt -> READ var SEMICOLON','readStmt',3,'p_comandoRead','analisadorSintatico.py',154),
  ('writeStmt -> WRITE expList SEMICOLON','writeStmt',3,'p_writeStmt','analisadorSintatico.py',161),
  ('returnStmt -> RETURN SEMICOLON','returnStmt',2,'p_returnStmt','analisadorSintatico.py',168),
  ('returnStmt -> RETURN exp SEMICOLON','returnStmt',3,'p_returnStmt','analisadorSintatico.py',169),
  ('subCall -> ID LPAREN expList RPAREN','subCall',4,'p_subCall','analisadorSintatico.py',179),
  ('assing -> var ASSING exp','assing',3,'p_assing','analisadorSintatico.py',186),
  ('assing -> var PLUSASSING exp','assing',3,'p_assing','analisadorSintatico.py',187),
  ('assing -> var MINUSASSING exp','assing',3,'p_assing','analisadorSintatico.py',188),
  ('assing -> var MULTASSING exp','assing',3,'p_assing','analisadorSintatico.py',189),
  ('assing -> var DIVIDEASSING exp','assing',3,'p_assing','analisadorSintatico.py',190),
  ('assing -> var MODASSING exp','assing',3,'p_assing','analisadorSintatico.py',191),
  ('exp -> exp PLUS exp','exp',3,'p_expArithmetic','analisadorSintatico.py',209),
  ('exp -> exp MINUS exp','exp',3,'p_expArithmetic','analisadorSintatico.py',210),
  ('exp -> exp MULT exp','exp',3,'p_expArithmetic','analisadorSintatico.py',211),
  ('exp -> exp DIVIDE exp','exp',3,'p_expArithmetic','analisadorSintatico.py',212),
  ('exp -> exp MOD exp','exp',3,'p_expArithmetic','analisadorSintatico.py',213),
  ('exp -> exp EQUALS exp','exp',3,'p_expComparasion','analisadorSintatico.py',229),
  ('exp -> exp DIFFERENT exp','exp',3,'p_expComparasion','analisadorSintatico.py',230),
  ('exp -> exp LTE exp','exp',3,'p_expComparasion','analisadorSintatico.py',231),
  ('exp -> exp GTE exp','exp',3,'p_expComparasion','analisadorSintatico.py',232),
  ('exp -> exp GT exp','exp',3,'p_expComparasion','analisadorSintatico.py',233),
  ('exp -> exp LT exp','exp',3,'p_expComparasion','analisadorSintatico.py',234),
  ('exp -> exp AND exp','exp',3,'p_expLogic','analisadorSintatico.py',252),
  ('exp -> exp OR exp','exp',3,'p_expLogic','analisadorSintatico.py',253),
  ('exp -> NOT exp','exp',2,'p_expLogic','analisadorSintatico.py',254),
  ('exp -> NEGUNARY exp','exp',2,'p_expLogic','analisadorSintatico.py',255),
  ('exp -> exp ? exp : exp','exp',5,'p_expTernary','analisadorSintatico.py',269),
  ('exp -> subCall','exp',1,'p_expSubCall','analisadorSintatico.py',276),
  ('exp -> var','exp',1,'p_expVar','analisadorSintatico.py',283),
  ('exp -> literal','exp',1,'p_expLiteral','analisadorSintatico.py',290),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_expMultParent','analisadorSintatico.py',297),
  ('var -> ID','var',1,'p_var','analisadorSintatico.py',304),
  ('var -> ID LCOR exp RCOR','var',4,'p_var','analisadorSintatico.py',305),
  ('literal -> NUMBER','literal',1,'p_literal','analisadorSintatico.py',315),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','analisadorSintatico.py',316),
  ('literal -> FALSE','literal',1,'p_literal','analisadorSintatico.py',317),
  ('literal -> TRUE','literal',1,'p_literal','analisadorSintatico.py',318),
  ('paramList -> paramSeq','paramList',1,'p_paramList','analisadorSintatico.py',325),
  ('paramList -> ε','paramList',1,'p_paramList','analisadorSintatico.py',326),
  ('program -> empty','program',1,'p_paramListNull','analisadorSintatico.py',333),
  ('paramSeq -> param','paramSeq',1,'p_paramSeq','analisadorSintatico.py',340),
  ('paramSeq -> param COMMA paramSeq','paramSeq',3,'p_paramSeq','analisadorSintatico.py',341),
  ('varDecList -> varDec varDecList','varDecList',2,'p_varDecList','analisadorSintatico.py',351),
  ('varDecList -> ε','varDecList',1,'p_varDecList','analisadorSintatico.py',352),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_varSpecSeq','analisadorSintatico.py',359),
  ('varSpecSeq -> varSpec COMMA varSpecSeq','varSpecSeq',3,'p_varSpecSeq','analisadorSintatico.py',360),
  ('decSeq -> dec','decSeq',1,'p_decSeq','analisadorSintatico.py',370),
  ('decSeq -> dec decSeq','decSeq',2,'p_decSeq','analisadorSintatico.py',371),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmtList','analisadorSintatico.py',381),
  ('stmtList -> ε','stmtList',1,'p_stmtList','analisadorSintatico.py',382),
  ('literalSeq -> literal','literalSeq',1,'p_literalSeq','analisadorSintatico.py',389),
  ('literalSeq -> literal literalSeq','literalSeq',2,'p_literalSeq','analisadorSintatico.py',390),
  ('expList -> expSeq','expList',1,'p_expList','analisadorSintatico.py',400),
  ('expList -> ε','expList',1,'p_expList','analisadorSintatico.py',401),
  ('expSeq -> exp','expSeq',1,'p_expSeq','analisadorSintatico.py',408),
  ('expSeq -> exp COMMA expSeq','expSeq',3,'p_expSeq','analisadorSintatico.py',409),
  ('empty -> <empty>','empty',0,'p_empty','analisadorSintatico.py',418),
]
